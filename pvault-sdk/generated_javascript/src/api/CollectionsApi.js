/**
 * Piiano Vault REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ModelsCollection from '../model/ModelsCollection';
import ModelsProperty from '../model/ModelsProperty';
import RestHTTPError from '../model/RestHTTPError';

/**
* Collections service.
* @module api/CollectionsApi
* @version 1.0
*/
export default class CollectionsApi {

    /**
    * Constructs a new CollectionsApi. 
    * @alias module:api/CollectionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addCollection operation.
     * @callback module:api/CollectionsApi~addCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add collection
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {module:model/ModelsCollection} modelsCollection Details of the collection including its properties.
     * @param {Object} opts Optional parameters
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {module:model/String} opts.format When set to `pvschema`, returns the added collection in the PVSchema format. Otherwise, returns the JSON format.
     * @param {Array.<module:model/String>} opts.options Options for the operation. Options include: - `hide_builtins` â€“ hide built-in properties from response. 
     * @param {module:api/CollectionsApi~addCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsCollection}
     */
    addCollection(reason, modelsCollection, opts, callback) {
      opts = opts || {};
      let postBody = modelsCollection;
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling addCollection");
      }
      // verify the required parameter 'modelsCollection' is set
      if (modelsCollection === undefined || modelsCollection === null) {
        throw new Error("Missing the required parameter 'modelsCollection' when calling addCollection");
      }

      let pathParams = {
      };
      let queryParams = {
        'adhoc_reason': opts['adhocReason'],
        'reason': reason,
        'format': opts['format'],
        'options': this.apiClient.buildCollectionParam(opts['options'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/pvschema'];
      let returnType = ModelsCollection;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/ctl/collections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addCollectionProperty operation.
     * @callback module:api/CollectionsApi~addCollectionPropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsProperty} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add collection property
     * @param {String} collection The name of the collection to add the property to.
     * @param {String} property The name of the property to add.
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {module:model/ModelsProperty} modelsProperty Details of the property.
     * @param {Object} opts Optional parameters
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {module:api/CollectionsApi~addCollectionPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsProperty}
     */
    addCollectionProperty(collection, property, reason, modelsProperty, opts, callback) {
      opts = opts || {};
      let postBody = modelsProperty;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling addCollectionProperty");
      }
      // verify the required parameter 'property' is set
      if (property === undefined || property === null) {
        throw new Error("Missing the required parameter 'property' when calling addCollectionProperty");
      }
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling addCollectionProperty");
      }
      // verify the required parameter 'modelsProperty' is set
      if (modelsProperty === undefined || modelsProperty === null) {
        throw new Error("Missing the required parameter 'modelsProperty' when calling addCollectionProperty");
      }

      let pathParams = {
        'collection': collection,
        'property': property
      };
      let queryParams = {
        'adhoc_reason': opts['adhocReason'],
        'reason': reason
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelsProperty;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/ctl/collections/{collection}/properties/{property}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCollection operation.
     * @callback module:api/CollectionsApi~deleteCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete collection
     * @param {String} collection The name of the collection.
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {Object} opts Optional parameters
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {module:api/CollectionsApi~deleteCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCollection(collection, reason, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling deleteCollection");
      }
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling deleteCollection");
      }

      let pathParams = {
        'collection': collection
      };
      let queryParams = {
        'adhoc_reason': opts['adhocReason'],
        'reason': reason
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/ctl/collections/{collection}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCollectionProperty operation.
     * @callback module:api/CollectionsApi~deleteCollectionPropertyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete collection property
     * @param {String} collection The name of the collection containing the property.
     * @param {String} property The name of the property.
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {Object} opts Optional parameters
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {module:api/CollectionsApi~deleteCollectionPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCollectionProperty(collection, property, reason, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling deleteCollectionProperty");
      }
      // verify the required parameter 'property' is set
      if (property === undefined || property === null) {
        throw new Error("Missing the required parameter 'property' when calling deleteCollectionProperty");
      }
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling deleteCollectionProperty");
      }

      let pathParams = {
        'collection': collection,
        'property': property
      };
      let queryParams = {
        'adhoc_reason': opts['adhocReason'],
        'reason': reason
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/ctl/collections/{collection}/properties/{property}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllCollections operation.
     * @callback module:api/CollectionsApi~getAllCollectionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsCollection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List collections
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {Object} opts Optional parameters
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {module:model/String} opts.format When set to `pvschema`, returns the collections in the PVSchema format. Otherwise, returns the JSON format.
     * @param {Array.<module:model/String>} opts.options Options for the operation. Options include: - `hide_builtins` â€“ hide built-in properties from response. 
     * @param {module:api/CollectionsApi~getAllCollectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsCollection>}
     */
    getAllCollections(reason, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling getAllCollections");
      }

      let pathParams = {
      };
      let queryParams = {
        'adhoc_reason': opts['adhocReason'],
        'reason': reason,
        'format': opts['format'],
        'options': this.apiClient.buildCollectionParam(opts['options'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsCollection];
      return this.apiClient.callApi(
        '/api/pvlt/1.0/ctl/collections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCollection operation.
     * @callback module:api/CollectionsApi~getCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get collection details
     * @param {String} collection The name of the collection.
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {Object} opts Optional parameters
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {module:model/String} opts.format When set to `pvschema`, returns the collection in the PVSchema format. Otherwise, returns the JSON format.
     * @param {Array.<module:model/String>} opts.options Options for the operation. Options include: - `hide_builtins` â€“ hide built-in properties from response. 
     * @param {module:api/CollectionsApi~getCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsCollection}
     */
    getCollection(collection, reason, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling getCollection");
      }
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling getCollection");
      }

      let pathParams = {
        'collection': collection
      };
      let queryParams = {
        'adhoc_reason': opts['adhocReason'],
        'reason': reason,
        'format': opts['format'],
        'options': this.apiClient.buildCollectionParam(opts['options'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsCollection;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/ctl/collections/{collection}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCollectionProperty operation.
     * @callback module:api/CollectionsApi~getCollectionPropertyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsProperty} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get collection property
     * @param {String} collection The ID of the collection containing the property.
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {String} property The name of the property.
     * @param {Object} opts Optional parameters
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {module:api/CollectionsApi~getCollectionPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsProperty}
     */
    getCollectionProperty(collection, reason, property, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling getCollectionProperty");
      }
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling getCollectionProperty");
      }
      // verify the required parameter 'property' is set
      if (property === undefined || property === null) {
        throw new Error("Missing the required parameter 'property' when calling getCollectionProperty");
      }

      let pathParams = {
        'collection': collection,
        'property': property
      };
      let queryParams = {
        'adhoc_reason': opts['adhocReason'],
        'reason': reason
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsProperty;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/ctl/collections/{collection}/properties/{property}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCollectionProperties operation.
     * @callback module:api/CollectionsApi~listCollectionPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsProperty>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List collection properties
     * @param {String} collection The name of the collection containing the properties.
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {Object} opts Optional parameters
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {Array.<module:model/String>} opts.options Options for the operation. Options include:  - `hide_builtins` â€“ hide built-in properties from response. 
     * @param {module:api/CollectionsApi~listCollectionPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsProperty>}
     */
    listCollectionProperties(collection, reason, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling listCollectionProperties");
      }
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling listCollectionProperties");
      }

      let pathParams = {
        'collection': collection
      };
      let queryParams = {
        'adhoc_reason': opts['adhocReason'],
        'reason': reason,
        'options': this.apiClient.buildCollectionParam(opts['options'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsProperty];
      return this.apiClient.callApi(
        '/api/pvlt/1.0/ctl/collections/{collection}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCollection operation.
     * @callback module:api/CollectionsApi~updateCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update collection details
     * @param {String} collection The name of the collection to import the properties to.
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {module:model/ModelsCollection} modelsCollection Details of the collection including its properties.
     * @param {Object} opts Optional parameters
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {module:model/String} opts.format When set to `pvschema`, returns the updated collection in the PVSchema format. Otherwise, returns the JSON format.
     * @param {Array.<module:model/String>} opts.options Options for the operation. Options include: - `hide_builtins` â€“ hide built-in properties from response. 
     * @param {module:api/CollectionsApi~updateCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsCollection}
     */
    updateCollection(collection, reason, modelsCollection, opts, callback) {
      opts = opts || {};
      let postBody = modelsCollection;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling updateCollection");
      }
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling updateCollection");
      }
      // verify the required parameter 'modelsCollection' is set
      if (modelsCollection === undefined || modelsCollection === null) {
        throw new Error("Missing the required parameter 'modelsCollection' when calling updateCollection");
      }

      let pathParams = {
        'collection': collection
      };
      let queryParams = {
        'adhoc_reason': opts['adhocReason'],
        'reason': reason,
        'format': opts['format'],
        'options': this.apiClient.buildCollectionParam(opts['options'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModelsCollection;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/ctl/collections/{collection}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCollectionProperty operation.
     * @callback module:api/CollectionsApi~updateCollectionPropertyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modify collection property
     * @param {String} collection The name of the collection containing the property.
     * @param {String} property The name of the property.
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {module:model/ModelsProperty} modelsProperty property info
     * @param {Object} opts Optional parameters
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {module:api/CollectionsApi~updateCollectionPropertyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateCollectionProperty(collection, property, reason, modelsProperty, opts, callback) {
      opts = opts || {};
      let postBody = modelsProperty;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling updateCollectionProperty");
      }
      // verify the required parameter 'property' is set
      if (property === undefined || property === null) {
        throw new Error("Missing the required parameter 'property' when calling updateCollectionProperty");
      }
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling updateCollectionProperty");
      }
      // verify the required parameter 'modelsProperty' is set
      if (modelsProperty === undefined || modelsProperty === null) {
        throw new Error("Missing the required parameter 'modelsProperty' when calling updateCollectionProperty");
      }

      let pathParams = {
        'collection': collection,
        'property': property
      };
      let queryParams = {
        'adhoc_reason': opts['adhocReason'],
        'reason': reason
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/ctl/collections/{collection}/properties/{property}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
