/**
 * Piiano Vault REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConfigConfig from '../model/ConfigConfig';
import GcDeletionCount from '../model/GcDeletionCount';
import ModelsAllGenerations from '../model/ModelsAllGenerations';
import ModelsHealth from '../model/ModelsHealth';
import ModelsKMSStatus from '../model/ModelsKMSStatus';
import ModelsLicense from '../model/ModelsLicense';
import ModelsProductVersion from '../model/ModelsProductVersion';
import RestHTTPError from '../model/RestHTTPError';

/**
* System service.
* @module api/SystemApi
* @version 1.0
*/
export default class SystemApi {

    /**
    * Constructs a new SystemApi. 
    * @alias module:api/SystemApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the controlHealth operation.
     * @callback module:api/SystemApi~controlHealthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsHealth} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get control service status
     * @param {module:api/SystemApi~controlHealthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsHealth}
     */
    controlHealth(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsHealth;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/ctl/info/health', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataHealth operation.
     * @callback module:api/SystemApi~dataHealthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsHealth} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get data service status
     * @param {module:api/SystemApi~dataHealthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsHealth}
     */
    dataHealth(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsHealth;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/data/info/health', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the garbageCollection operation.
     * @callback module:api/SystemApi~garbageCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GcDeletionCount>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Purge expired and soft deleted objects and tokens
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.filter Filter for the GC operation. Options include: `objects_only`,`tokens_only`. (default to 'all')
     * @param {Boolean} opts.dryRun Runs dry run GC if set to true. (default to false)
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {Boolean} opts.reloadCache Reloads the cache before the action.
     * @param {module:api/SystemApi~garbageCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GcDeletionCount>}
     */
    garbageCollection(reason, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling garbageCollection");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'dry_run': opts['dryRun'],
        'adhoc_reason': opts['adhocReason'],
        'reason': reason,
        'reload_cache': opts['reloadCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GcDeletionCount];
      return this.apiClient.callApi(
        '/api/pvlt/1.0/system/admin/lifecycle/gc', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getClusterInfo operation.
     * @callback module:api/SystemApi~getClusterInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsAllGenerations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get cluster information
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {Object} opts Optional parameters
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {module:api/SystemApi~getClusterInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsAllGenerations}
     */
    getClusterInfo(reason, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling getClusterInfo");
      }

      let pathParams = {
      };
      let queryParams = {
        'adhoc_reason': opts['adhocReason'],
        'reason': reason
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsAllGenerations;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/ctl/info/cluster', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConfiguration operation.
     * @callback module:api/SystemApi~getConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get system configuration
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {Object} opts Optional parameters
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {module:api/SystemApi~getConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigConfig}
     */
    getConfiguration(reason, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling getConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
        'adhoc_reason': opts['adhocReason'],
        'reason': reason
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/toml', 'application/json'];
      let returnType = ConfigConfig;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/system/info/configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getKms operation.
     * @callback module:api/SystemApi~getKmsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsKMSStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get KMS status
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {Object} opts Optional parameters
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {module:api/SystemApi~getKmsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsKMSStatus}
     */
    getKms(reason, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling getKms");
      }

      let pathParams = {
      };
      let queryParams = {
        'adhoc_reason': opts['adhocReason'],
        'reason': reason
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsKMSStatus;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/system/info/kms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLicense operation.
     * @callback module:api/SystemApi~getLicenseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsLicense} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get license
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {Object} opts Optional parameters
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {module:api/SystemApi~getLicenseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsLicense}
     */
    getLicense(reason, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling getLicense");
      }

      let pathParams = {
      };
      let queryParams = {
        'adhoc_reason': opts['adhocReason'],
        'reason': reason
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsLicense;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/system/info/license', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVaultVersion operation.
     * @callback module:api/SystemApi~getVaultVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelsProductVersion} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Vault version
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {Object} opts Optional parameters
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {module:api/SystemApi~getVaultVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelsProductVersion}
     */
    getVaultVersion(reason, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling getVaultVersion");
      }

      let pathParams = {
      };
      let queryParams = {
        'adhoc_reason': opts['adhocReason'],
        'reason': reason
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelsProductVersion;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/system/info/version', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rotateKeys operation.
     * @callback module:api/SystemApi~rotateKeysCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rotate data encryption keys
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {Object} opts Optional parameters
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {module:api/SystemApi~rotateKeysCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rotateKeys(reason, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling rotateKeys");
      }

      let pathParams = {
      };
      let queryParams = {
        'adhoc_reason': opts['adhocReason'],
        'reason': reason
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/system/admin/keys/rotate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the triggerError operation.
     * @callback module:api/SystemApi~triggerErrorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trigger an artificial error
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {Object} opts Optional parameters
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {module:api/SystemApi~triggerErrorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    triggerError(reason, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling triggerError");
      }

      let pathParams = {
      };
      let queryParams = {
        'adhoc_reason': opts['adhocReason'],
        'reason': reason
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/system/debug/error/trigger', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
