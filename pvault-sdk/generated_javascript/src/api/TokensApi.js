/**
 * Piiano Vault REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ModelsDetokenizedToken from '../model/ModelsDetokenizedToken';
import ModelsRotatedToken from '../model/ModelsRotatedToken';
import ModelsTokenMetadata from '../model/ModelsTokenMetadata';
import ModelsTokenValue from '../model/ModelsTokenValue';
import ModelsTokenizeRequest from '../model/ModelsTokenizeRequest';
import ModelsUpdateTokenRequest from '../model/ModelsUpdateTokenRequest';
import RestHTTPError from '../model/RestHTTPError';

/**
* Tokens service.
* @module api/TokensApi
* @version 1.0
*/
export default class TokensApi {

    /**
    * Constructs a new TokensApi. 
    * @alias module:api/TokensApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteToken operation.
     * @callback module:api/TokensApi~deleteTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete token
     * @param {String} collection The name of the collection containing the object.
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.objectId Comma-separated list of object IDs.
     * @param {Array.<String>} opts.tag Comma-separated list of tags.
     * @param {Array.<String>} opts.tokenId Comma-separated list of token IDs.
     * @param {Array.<String>} opts.options Options for the operation. Options include: - `hard_delete` – permanently delete the tokens. - `deleted` – remove only deleted tokens, requires `hard_delete` to be specified. 
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {Boolean} opts.reloadCache Reloads the cache before the action.
     * @param {module:api/TokensApi~deleteTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteToken(collection, reason, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling deleteToken");
      }
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling deleteToken");
      }

      let pathParams = {
        'collection': collection
      };
      let queryParams = {
        'object_id': this.apiClient.buildCollectionParam(opts['objectId'], 'multi'),
        'tag': this.apiClient.buildCollectionParam(opts['tag'], 'multi'),
        'token_id': this.apiClient.buildCollectionParam(opts['tokenId'], 'multi'),
        'options': this.apiClient.buildCollectionParam(opts['options'], 'multi'),
        'adhoc_reason': opts['adhocReason'],
        'reason': reason,
        'reload_cache': opts['reloadCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/data/collections/{collection}/tokens', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the detokenize operation.
     * @callback module:api/TokensApi~detokenizeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsDetokenizedToken>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detokenize
     * @param {String} collection The name of the collection containing the object.
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.objectId Comma-separated list of object IDs.
     * @param {Array.<String>} opts.options Comma-separated list of options.
     * @param {Array.<String>} opts.tag Comma-separated list of tags.
     * @param {Array.<String>} opts.tokenId Comma-separated list of token IDs.
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {Boolean} opts.reloadCache Reloads the cache before the action.
     * @param {module:api/TokensApi~detokenizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsDetokenizedToken>}
     */
    detokenize(collection, reason, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling detokenize");
      }
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling detokenize");
      }

      let pathParams = {
        'collection': collection
      };
      let queryParams = {
        'object_id': this.apiClient.buildCollectionParam(opts['objectId'], 'multi'),
        'options': this.apiClient.buildCollectionParam(opts['options'], 'multi'),
        'tag': this.apiClient.buildCollectionParam(opts['tag'], 'multi'),
        'token_id': this.apiClient.buildCollectionParam(opts['tokenId'], 'multi'),
        'adhoc_reason': opts['adhocReason'],
        'reason': reason,
        'reload_cache': opts['reloadCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsDetokenizedToken];
      return this.apiClient.callApi(
        '/api/pvlt/1.0/data/collections/{collection}/tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getToken operation.
     * @callback module:api/TokensApi~getTokenCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsTokenMetadata>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tokens metadata
     * @param {String} collection The name of the collection containing the object.
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.objectId Comma-separated list of object IDs.
     * @param {Array.<String>} opts.options Options for the operation. Options include: - `deleted` – get only deleted tokens. 
     * @param {Array.<String>} opts.tag Comma-separated list of tags.
     * @param {Array.<String>} opts.tokenId Comma-separated list of token IDs.
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {Boolean} opts.reloadCache Reloads the cache before the action.
     * @param {module:api/TokensApi~getTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsTokenMetadata>}
     */
    getToken(collection, reason, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling getToken");
      }
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling getToken");
      }

      let pathParams = {
        'collection': collection
      };
      let queryParams = {
        'object_id': this.apiClient.buildCollectionParam(opts['objectId'], 'multi'),
        'options': this.apiClient.buildCollectionParam(opts['options'], 'multi'),
        'tag': this.apiClient.buildCollectionParam(opts['tag'], 'multi'),
        'token_id': this.apiClient.buildCollectionParam(opts['tokenId'], 'multi'),
        'adhoc_reason': opts['adhocReason'],
        'reason': reason,
        'reload_cache': opts['reloadCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsTokenMetadata];
      return this.apiClient.callApi(
        '/api/pvlt/1.0/data/collections/{collection}/query/tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rotateToken operation.
     * @callback module:api/TokensApi~rotateTokenCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsRotatedToken>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rotate token
     * @param {Array.<String>} tokenId Comma-separated list of token IDs.
     * @param {String} collection The name of the collection containing the object.
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {Object} opts Optional parameters
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {Boolean} opts.reloadCache Reloads the cache before the action.
     * @param {module:api/TokensApi~rotateTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsRotatedToken>}
     */
    rotateToken(tokenId, collection, reason, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tokenId' is set
      if (tokenId === undefined || tokenId === null) {
        throw new Error("Missing the required parameter 'tokenId' when calling rotateToken");
      }
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling rotateToken");
      }
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling rotateToken");
      }

      let pathParams = {
        'collection': collection
      };
      let queryParams = {
        'token_id': this.apiClient.buildCollectionParam(tokenId, 'multi'),
        'adhoc_reason': opts['adhocReason'],
        'reason': reason,
        'reload_cache': opts['reloadCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelsRotatedToken];
      return this.apiClient.callApi(
        '/api/pvlt/1.0/data/collections/{collection}/rotate/tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tokenize operation.
     * @callback module:api/TokensApi~tokenizeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelsTokenValue>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tokenize
     * @param {String} collection The name of the collection containing the object.
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {module:model/ModelsTokenizeRequest} modelsTokenizeRequest Details of the object and property.
     * @param {Object} opts Optional parameters
     * @param {String} opts.ttl Token time to live (TTL) in seconds. If not set, the default TTL is used. See the `PVAULT_TTL_TOKENS` time to live environment variable.
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {Boolean} opts.reloadCache Reloads the cache before the action.
     * @param {module:api/TokensApi~tokenizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelsTokenValue>}
     */
    tokenize(collection, reason, modelsTokenizeRequest, opts, callback) {
      opts = opts || {};
      let postBody = modelsTokenizeRequest;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling tokenize");
      }
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling tokenize");
      }
      // verify the required parameter 'modelsTokenizeRequest' is set
      if (modelsTokenizeRequest === undefined || modelsTokenizeRequest === null) {
        throw new Error("Missing the required parameter 'modelsTokenizeRequest' when calling tokenize");
      }

      let pathParams = {
        'collection': collection
      };
      let queryParams = {
        'ttl': opts['ttl'],
        'adhoc_reason': opts['adhocReason'],
        'reason': reason,
        'reload_cache': opts['reloadCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [ModelsTokenValue];
      return this.apiClient.callApi(
        '/api/pvlt/1.0/data/collections/{collection}/tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateToken operation.
     * @callback module:api/TokensApi~updateTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update token
     * @param {String} collection The name of the collection containing the object.
     * @param {module:model/String} reason Details of the reason for requesting the property. The default is set when no access reason is provided and PVAULT_SERVICE_FORCE_ACCESS_REASON is false.
     * @param {module:model/ModelsUpdateTokenRequest} modelsUpdateTokenRequest Update token request details.
     * @param {Object} opts Optional parameters
     * @param {String} opts.ttl Token time to live (TTL) in seconds. If not set, the token's expiry date is not changed.
     * @param {Array.<String>} opts.objectId Comma-separated list of object IDs.
     * @param {Array.<String>} opts.tag Comma-separated list of tags.
     * @param {Array.<String>} opts.tokenId Comma-separated list of token IDs.
     * @param {Array.<String>} opts.options Options for the operation. Options include: - `deleted` – update only deleted tokens. 
     * @param {String} opts.adhocReason An ad-hoc reason for accessing the Vault data.
     * @param {Boolean} opts.reloadCache Reloads the cache before the action.
     * @param {module:api/TokensApi~updateTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateToken(collection, reason, modelsUpdateTokenRequest, opts, callback) {
      opts = opts || {};
      let postBody = modelsUpdateTokenRequest;
      // verify the required parameter 'collection' is set
      if (collection === undefined || collection === null) {
        throw new Error("Missing the required parameter 'collection' when calling updateToken");
      }
      // verify the required parameter 'reason' is set
      if (reason === undefined || reason === null) {
        throw new Error("Missing the required parameter 'reason' when calling updateToken");
      }
      // verify the required parameter 'modelsUpdateTokenRequest' is set
      if (modelsUpdateTokenRequest === undefined || modelsUpdateTokenRequest === null) {
        throw new Error("Missing the required parameter 'modelsUpdateTokenRequest' when calling updateToken");
      }

      let pathParams = {
        'collection': collection
      };
      let queryParams = {
        'ttl': opts['ttl'],
        'object_id': this.apiClient.buildCollectionParam(opts['objectId'], 'multi'),
        'tag': this.apiClient.buildCollectionParam(opts['tag'], 'multi'),
        'token_id': this.apiClient.buildCollectionParam(opts['tokenId'], 'multi'),
        'options': this.apiClient.buildCollectionParam(opts['options'], 'multi'),
        'adhoc_reason': opts['adhocReason'],
        'reason': reason,
        'reload_cache': opts['reloadCache']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pvlt/1.0/data/collections/{collection}/tokens', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
