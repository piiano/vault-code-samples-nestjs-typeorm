/**
 * Piiano Vault REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModelsTokenAggregatedMetadata from './ModelsTokenAggregatedMetadata';
import ModelsTokenRefMetadata from './ModelsTokenRefMetadata';

/**
 * The ModelsTokenMetadata model module.
 * @module model/ModelsTokenMetadata
 * @version 1.0
 */
class ModelsTokenMetadata {
    /**
     * Constructs a new <code>ModelsTokenMetadata</code>.
     * @alias module:model/ModelsTokenMetadata
     */
    constructor() { 
        
        ModelsTokenMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ModelsTokenMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ModelsTokenMetadata} obj Optional instance to populate.
     * @return {module:model/ModelsTokenMetadata} The populated <code>ModelsTokenMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ModelsTokenMetadata();

            if (data.hasOwnProperty('agg')) {
                obj['agg'] = ModelsTokenAggregatedMetadata.constructFromObject(data['agg']);
            }
            if (data.hasOwnProperty('reusable_token_id')) {
                obj['reusable_token_id'] = ApiClient.convertToType(data['reusable_token_id'], 'Boolean');
            }
            if (data.hasOwnProperty('reversible')) {
                obj['reversible'] = ApiClient.convertToType(data['reversible'], 'Boolean');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
            if (data.hasOwnProperty('tokens')) {
                obj['tokens'] = ApiClient.convertToType(data['tokens'], [ModelsTokenRefMetadata]);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/ModelsTokenAggregatedMetadata} agg
 */
ModelsTokenMetadata.prototype['agg'] = undefined;

/**
 * ID reusability status of the tokens.
 * @member {Boolean} reusable_token_id
 */
ModelsTokenMetadata.prototype['reusable_token_id'] = undefined;

/**
 * Whether the token is reversible or not.
 * @member {Boolean} reversible
 */
ModelsTokenMetadata.prototype['reversible'] = undefined;

/**
 * The scope of the tokens.
 * @member {String} scope
 */
ModelsTokenMetadata.prototype['scope'] = undefined;

/**
 * The shared ID of the tokens.
 * @member {String} token_id
 */
ModelsTokenMetadata.prototype['token_id'] = undefined;

/**
 * Metadata for the each token.
 * @member {Array.<module:model/ModelsTokenRefMetadata>} tokens
 */
ModelsTokenMetadata.prototype['tokens'] = undefined;






export default ModelsTokenMetadata;

