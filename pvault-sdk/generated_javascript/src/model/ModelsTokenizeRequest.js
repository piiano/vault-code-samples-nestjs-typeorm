/**
 * Piiano Vault REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ModelsTokenizeRequest model module.
 * @module model/ModelsTokenizeRequest
 * @version 1.0
 */
class ModelsTokenizeRequest {
    /**
     * Constructs a new <code>ModelsTokenizeRequest</code>.
     * @alias module:model/ModelsTokenizeRequest
     * @param objectIds {Array.<String>} Object IDs to tokenize.
     * @param props {Array.<String>} The properties to tokenize.
     * @param type {module:model/ModelsTokenizeRequest.TypeEnum} Token type.
     */
    constructor(objectIds, props, type) { 
        
        ModelsTokenizeRequest.initialize(this, objectIds, props, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, objectIds, props, type) { 
        obj['object_ids'] = objectIds;
        obj['props'] = props;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ModelsTokenizeRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ModelsTokenizeRequest} obj Optional instance to populate.
     * @return {module:model/ModelsTokenizeRequest} The populated <code>ModelsTokenizeRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ModelsTokenizeRequest();

            if (data.hasOwnProperty('fpprops')) {
                obj['fpprops'] = ApiClient.convertToType(data['fpprops'], ['String']);
            }
            if (data.hasOwnProperty('fptemplate')) {
                obj['fptemplate'] = ApiClient.convertToType(data['fptemplate'], 'String');
            }
            if (data.hasOwnProperty('object_ids')) {
                obj['object_ids'] = ApiClient.convertToType(data['object_ids'], ['String']);
            }
            if (data.hasOwnProperty('props')) {
                obj['props'] = ApiClient.convertToType(data['props'], ['String']);
            }
            if (data.hasOwnProperty('reuse_token_id')) {
                obj['reuse_token_id'] = ApiClient.convertToType(data['reuse_token_id'], 'Boolean');
            }
            if (data.hasOwnProperty('reversible')) {
                obj['reversible'] = ApiClient.convertToType(data['reversible'], 'Boolean');
            }
            if (data.hasOwnProperty('scope')) {
                obj['scope'] = ApiClient.convertToType(data['scope'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Format preserving properties names to be used by the template for the ID generation.
 * @member {Array.<String>} fpprops
 */
ModelsTokenizeRequest.prototype['fpprops'] = undefined;

/**
 * Format preserving template to use. Keep empty to use UUID.
 * @member {String} fptemplate
 */
ModelsTokenizeRequest.prototype['fptemplate'] = undefined;

/**
 * Object IDs to tokenize.
 * @member {Array.<String>} object_ids
 */
ModelsTokenizeRequest.prototype['object_ids'] = undefined;

/**
 * The properties to tokenize.
 * @member {Array.<String>} props
 */
ModelsTokenizeRequest.prototype['props'] = undefined;

/**
 * Whether the token ID can be reused if tokenizing the same data.
 * @member {Boolean} reuse_token_id
 * @default false
 */
ModelsTokenizeRequest.prototype['reuse_token_id'] = false;

/**
 * Whether the token can be detokenized.
 * @member {Boolean} reversible
 * @default true
 */
ModelsTokenizeRequest.prototype['reversible'] = true;

/**
 * Uniqueness scope of the token.
 * @member {String} scope
 * @default 'default'
 */
ModelsTokenizeRequest.prototype['scope'] = 'default';

/**
 * Tags to attach to the token (max 10).
 * @member {Array.<String>} tags
 */
ModelsTokenizeRequest.prototype['tags'] = undefined;

/**
 * Token type.
 * @member {module:model/ModelsTokenizeRequest.TypeEnum} type
 */
ModelsTokenizeRequest.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ModelsTokenizeRequest['TypeEnum'] = {

    /**
     * value: "pointer"
     * @const
     */
    "pointer": "pointer",

    /**
     * value: "value"
     * @const
     */
    "value": "value"
};



export default ModelsTokenizeRequest;

