/**
 * Piiano Vault REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PiianoVaultRestApi);
  }
}(this, function(expect, PiianoVaultRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PiianoVaultRestApi.SystemApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SystemApi', function() {
    describe('controlHealth', function() {
      it('should call controlHealth successfully', function(done) {
        //uncomment below and update the code to test controlHealth
        //instance.controlHealth(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dataHealth', function() {
      it('should call dataHealth successfully', function(done) {
        //uncomment below and update the code to test dataHealth
        //instance.dataHealth(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('garbageCollection', function() {
      it('should call garbageCollection successfully', function(done) {
        //uncomment below and update the code to test garbageCollection
        //instance.garbageCollection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getClusterInfo', function() {
      it('should call getClusterInfo successfully', function(done) {
        //uncomment below and update the code to test getClusterInfo
        //instance.getClusterInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getConfiguration', function() {
      it('should call getConfiguration successfully', function(done) {
        //uncomment below and update the code to test getConfiguration
        //instance.getConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getKms', function() {
      it('should call getKms successfully', function(done) {
        //uncomment below and update the code to test getKms
        //instance.getKms(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLicense', function() {
      it('should call getLicense successfully', function(done) {
        //uncomment below and update the code to test getLicense
        //instance.getLicense(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getVaultVersion', function() {
      it('should call getVaultVersion successfully', function(done) {
        //uncomment below and update the code to test getVaultVersion
        //instance.getVaultVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rotateKeys', function() {
      it('should call rotateKeys successfully', function(done) {
        //uncomment below and update the code to test rotateKeys
        //instance.rotateKeys(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('triggerError', function() {
      it('should call triggerError successfully', function(done) {
        //uncomment below and update the code to test triggerError
        //instance.triggerError(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
