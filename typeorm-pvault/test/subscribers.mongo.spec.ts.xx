import { afterEach, beforeEach, describe, it } from "mocha";
import { expect } from "chai";
import {
  Entity,
  DataSource,
  Column,
  ObjectID,
  ObjectIdColumn,
  EntitySubscriberInterface,
  EventSubscriber,
  getMetadataArgsStorage,
  InsertEvent,
  UpdateEvent,
  BeforeInsert,
} from "typeorm";
import { ExtendedColumnOptions, PvaultTokenTransformer } from "../src";
import { plainToClass } from "class-transformer";

@EventSubscriber()
export class tempSub implements EntitySubscriberInterface {
  /**
   * Encrypt before insertion.
   */
  async beforeInsert(event: InsertEvent<any>): Promise<void> {
    console.log("beforeInsert");
  }

  /**
   * Encrypt before update.
   */
  beforeUpdate(event: UpdateEvent<any>): void {
    console.log("beforeUpdate");
  }

  /**
   * Decrypt after find.
   */
  async afterLoad(entity: any): Promise<void> {
    console.log("afterLoad", entity);
  }
}

@Entity()
export class User {
  @ObjectIdColumn()
  id: ObjectID;

  @Column({
    nullable: false,
  })
  email: string;

  @Column()
  country: string;
}

describe("Transformer", function () {
  let connection: DataSource;

  this.timeout(10000);

  beforeEach(async () => {
    connection = new DataSource({
      username: "appuser",
      password: "pass",
      host: "localhost",
      port: 27017,
      type: "mongodb",
      ssl: false,
      dropSchema: true,
      entities: [User],
      synchronize: true,
      logging: false,
      subscribers: [tempSub],
    });

    await connection.initialize();
  });

  afterEach(async () => {
    await connection.destroy();
  });

  it("sanity roundtrip", async function () {
    const repo = await connection.getRepository(User);

    const newUser = {
      email: "aaa@gmail.com",
      country: "GM",
    };

    await repo.insert(newUser);
    await repo.update(
      {
        email: "aaa@gmail.com",
      },
      newUser
    );
    // await repo.find();
  });
});
